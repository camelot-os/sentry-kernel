# SPDX-FileCopyrightText: 2023 Ledger SAS
# SPDX-License-Identifier: Apache-2.0

# autogenerated VTOR table from SVD
#vtor_s = custom_target('gen_vtor',
#    input: vtor_table_in,
#    output: '@BASENAME@',
#    depends: [ svd_json ],
#    command: [ jinja_cli, '-d', svd_json, '-o', '@OUTPUT@', '@INPUT@' ],
#)
#sentry_startup += (
#    vtor_s.to_list()
#)

target_arch_args += [
    '-mcpu=cortex-@0@'.format(kconfig_data.get_unquoted('CONFIG_ARCH_ARM_CORTEX_NAME')),
    kconfig_data.get_unquoted('CONFIG_ISA_CFLAGS'),
    kconfig_data.get_unquoted('CONFIG_ENDIANNESS_CFLAGS'),
]

if kconfig_data.get('CONFIG_FPU_SOFT_ABI', 0) != 1
target_arch_args += [
    # FIXME: mfloat-abi always needed, -mfpu only if abi == softfp or hard
    kconfig_data.get_unquoted('CONFIG_FPU_ABI_CFLAGS'),
]
endif


sentry_source_set.add(files(
  'nvic.c',
  'thread.c',
  'mpu.c',
  'systick.c',
))

sentry_startup += files(
  'handler.c',
)

sentry_vtor_template = files('vtor.c.in')

sentry_vtor_c = custom_target('gen_vtor',
  input: sentry_vtor_template,
  output: '@BASENAME@',
  depends: [ svd_json ],
  command: [ jinja_cli, '-d', svd_json, '-o', '@OUTPUT@', '@INPUT@' ],
)

sentry_startup += sentry_vtor_c

# include SoC-specific meson file, local path forged from the .config SoC name
subdir(kconfig_data.get_unquoted('CONFIG_ARCH_SOCNAME').to_lower())
