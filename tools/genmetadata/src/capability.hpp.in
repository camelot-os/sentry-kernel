// SPDX-FileCopyrightText: 2024 Ledger SAS
// SPDX-License-Identifier: Apache-2.0

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

#pragma once

#include <cstdint>
#include <unordered_map>
#include <string_view>

enum class capability: uint32_t {
{% filter indent(4, true) -%}
{% for cap in capabilities -%}
{{ cap.name }} = (1 << {{ cap.shift }}),
{% endfor -%}
{% endfilter -%}
};

static inline std::underlying_type_t<capability> capability_from_label(std::string_view label) {
{% filter indent(4, true) -%}
static const std::unordered_map<std::string_view, capability> capabilities{
{% filter indent(4, true) -%}
{% for cap in capabilities -%}
{ "{{ cap.name }}", capability::{{ cap.name }} },
{% endfor -%}
{% endfilter -%}
};
{% endfilter %}
    return static_cast<std::underlying_type_t<capability>>(capabilities.at(label));
}
