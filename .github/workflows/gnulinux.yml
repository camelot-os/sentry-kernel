# SPDX-FileCopyrightText: 2023-2024 Ledger SAS
# SPDX-License-Identifier: Apache-2.0

name: Sentry kernel build on GNU/Linux distros

on:
  push:
  pull_request:
    branches:
    - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# using /home/build as home, as buildbot is using user build. Cache is still in /cache
# This allows the usage of automated ssh key installation step

jobs:
  forge_matrix:
    runs-on: ubuntu-latest
    container:
      image: python:3.9.14-alpine3.16
    steps:
      - id: set_matrix
        shell: python
        run: |
          import os
          if "${{ github.event_name }}" == "pull_request":
            operating_system = [ 'mesonbuild/ubuntu-rolling', 'mesonbuild/arch:latest' ]
            toolchain = [ 'gcc|12.3.Rel1', 'gcc|10.3-2021.07', 'gcc|13.2.Rel1', 'gcc|14.2.Rel1' ]
            config = [
              { 'name': 'nucleo_u5a5_autotest', 'cpu': 'cm33', 'triple': 'thumbv8m.main-none-eabi' },
              { 'name': 'nucleo_u5a5_autotest_harden', 'cpu': 'cm33', 'triple': 'thumbv8m.main-none-eabi' },
              { 'name': 'nucleo_u5a5_nooutput', 'cpu': 'cm33', 'triple': 'thumbv8m.main-none-eabi' },
              { 'name': 'nucleo_wb55_autotest', 'cpu': 'cm4', 'triple': 'thumbv7em-none-eabi' },
              { 'name': 'stm32f429i_disc1_debug', 'cpu': 'cm4', 'triple': 'thumbv7em-none-eabi' },
              { 'name': 'stm32f429i_disc1_release', 'cpu': 'cm4', 'triple': 'thumbv7em-none-eabi' },
              { 'name': 'stm32f429i_disc1_autotest', 'cpu': 'cm4', 'triple': 'thumbv7em-none-eabi' },
            ]
          else:
            operating_system = [ 'mesonbuild/ubuntu-rolling' ]
            toolchain = [ 'gcc|13.2.Rel1' ]
            config = [
              { 'name': 'nucleo_u5a5_autotest', 'cpu': 'cm33', 'triple': 'thumbv8m.main-none-eabi' },
              { 'name': 'nucleo_u5a5_autotest_rs', 'cpu': 'cm33', 'triple': 'thumbv8m.main-none-eabi' },
              { 'name': 'nucleo_u5a5_autotest_harden', 'cpu': 'cm33', 'triple': 'thumbv8m.main-none-eabi' },
              { 'name': 'nucleo_wb55_autotest', 'cpu': 'cm4', 'triple': 'thumbv7em-none-eabi' },
              { 'name': 'stm32f429i_disc1_debug', 'cpu': 'cm4', 'triple': 'thumbv7em-none-eabi' },
              { 'name': 'nucleo_l476rg_debug', 'cpu': 'cm4', 'triple': 'thumbv7em-none-eabi' },
              { 'name': 'nucleo_f401re', 'cpu': 'cm4', 'triple': 'thumbv7em-none-eabi' },
            ]
          with open(os.environ['GITHUB_OUTPUT'], 'w') as gh_out:
            gh_out.write(f"operating_system={operating_system}\n")
            gh_out.write(f"toolchain={toolchain}\n")
            gh_out.write(f"config={config}\n")
    outputs:
      operating_system: ${{ steps.set_matrix.outputs.operating_system }}
      toolchain: ${{ steps.set_matrix.outputs.toolchain }}
      config: ${{ steps.set_matrix.outputs.config }}


  build:
    needs: [ forge_matrix ]
    strategy:
      matrix:
        operating_system: ${{ fromJSON(needs.forge_matrix.outputs.operating_system) }}
        toolchain: ${{ fromJSON(needs.forge_matrix.outputs.toolchain) }}
        config: ${{ fromJSON(needs.forge_matrix.outputs.config) }}
        exclude:
        - operating_system: 'mesonbuild/fedora:latest'
          toolchain: 'gcc|10.3-2021.07'
    name: build
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.operating_system }}
    steps:
      - name: XXX git permission quirk XXX
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          set-safe-directory: true
      - name: Clone cross-files
        uses: actions/checkout@v4
        with:
          ref:  'main'
          repository: 'camelot-os/meson-cross-files'
          path: crossfiles
      - name: Deploy cross-files
        run: |
          mkdir -p $HOME/.local/share/meson/cross
          cp -a $GITHUB_WORKSPACE/crossfiles/*.ini $HOME/.local/share/meson/cross
          echo "MESON_CROSS_FILES=$HOME/.local/share/meson/cross" >> $GITHUB_ENV
        shell: bash
      - name: install prerequisites pkg
        uses: camelot-os/action-install-pkg@v1
        with:
          packages: 'dtc|device-tree-compiler,libssh2-1|libssh2,curl,lld,srecord'
      - name: Split compiler reference
        id: split
        shell: bash
        run: |
          input_toolchain="${{matrix.toolchain}}"
          toolchain_compiler=${input_toolchain%%|*}
          toolchain_version=${input_toolchain##*|}
          echo "compiler=$toolchain_compiler" >> $GITHUB_ENV
          echo "compiler_version=$toolchain_version" >> $GITHUB_ENV
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: 1.86.0
          targets: ${{ matrix.config.triple }},x86_64-unknown-linux-gnu
          components: clippy,rustfmt
      - name: Setup C toolchain
        uses: camelot-os/action-setup-compiler@v1
        with:
          compiler: ${{ env.compiler }}
          triple: arm-none-eabi
          ref: ${{ env.compiler_version }}
          workspace: $GITHUB_WORKSPACE
      - name: deploy local deps
        run: |
          pip install -r requirements.txt
      - name: defconfig
        run: |
          defconfig configs/${{ matrix.config.name }}_defconfig
      - name: Meson Build
        uses: camelot-os/action-meson@v1
        with:
          cross_files: ${{ format('{0}/{1}-none-eabi-gcc.ini', env.MESON_CROSS_FILES, matrix.config.cpu) }}
          actions: '["prefetch", "setup", "compile"]'
          options: '-Dconfig=.config -Ddts=dts/examples/${{ matrix.config.name }}.dts -Ddts-include-dirs=dts'
      - name: Meson postcheck
        if: failure()
        run: |
          cat builddir/meson-logs/meson-log.txt

  test:
    needs: [ build ]
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    container:
      image: 'mesonbuild/ubuntu-rolling'
    steps:
      - name: XXX git permission quirk XXX
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          set-safe-directory: true
      - name: Clone cross-files
        uses: actions/checkout@v4
        with:
          ref:  'main'
          repository: 'camelot-os/meson-cross-files'
          path: crossfiles
      - name: Deploy cross-files
        run: |
          mkdir -p $HOME/.local/share/meson/cross
          cp -a $GITHUB_WORKSPACE/crossfiles/*.ini $HOME/.local/share/meson/cross
          echo "MESON_CROSS_FILES=$HOME/.local/share/meson/cross" >> $GITHUB_ENV
        shell: bash
      - name: install curl pkg
        uses: camelot-os/action-install-pkg@v1
        with:
          packages: 'dtc|device-tree-compiler,libssh2-1|libssh2,curl,lld'
      - name: Setup compiler
        uses: camelot-os/action-setup-compiler@v1
        with:
          compiler: gcc
          triple: arm-none-eabi
          ref: '12.3.Rel1'
          workspace: $GITHUB_WORKSPACE
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: 1.86.0
          targets: thumbv7m-none-eabi,thumbv7em-none-eabi,thumbv7em-none-eabihf
          components: clippy,rustfmt
      - name: deploy local deps
        run: |
          pip install -r requirements.txt
      - name: defconfig
        run: |
          defconfig configs/stm32f429i_disc1_debug_defconfig
      - name: Meson Build
        uses: camelot-os/action-meson@v1
        with:
          cross_files: ${{ format('{0}/{1}', env.MESON_CROSS_FILES, 'cm4-none-eabi-gcc.ini') }}
          actions: '["prefetch", "setup", "test"]'
          options: '-Dconfig=.config -Ddts=dts/examples/stm32f429i_disc1_debug.dts -Ddts-include-dirs=dts -Dwith_tests=true -Db_coverage=false -Doptimization=0'
      - name: Meson postcheck
        if: failure()
        run: |
          cat builddir/meson-logs/meson-log.txt
          cat builddir/meson-logs/testlog.txt
      - name: Setup Miri (Rust nightly)
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: nightly
          components: miri
      - name: Prepare Miri
        working-directory: ./uapi
        run: cargo miri setup
      - name: Run Miri tests
        working-directory: ./uapi
        run: |
          export MIRI_FLAGS="-Zmiri-strict-provenance -Zmiri-track-raw-pointers"
          cargo miri test
      - name: Setup Kani (Rust nightly)
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: nightly
      - name: Prepare & setup Kani
        working-directory: ./uapi
        run: |
          cargo install --locked kani-verifier
          cargo kani setup
      - name: Run Kani tests
        working-directory: ./uapi
        run: |
          cargo kani --tests
  doc:
    needs: [ build ]
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    container:
      image: 'mesonbuild/ubuntu-rolling'
    steps:
      - name: XXX git permission quirk XXX
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          set-safe-directory: true
      - name: Clone cross-files
        uses: actions/checkout@v4
        with:
          ref:  'main'
          repository: 'camelot-os/meson-cross-files'
          path: crossfiles
      - name: Deploy cross-files
        run: |
          mkdir -p $HOME/.local/share/meson/cross
          cp -a $GITHUB_WORKSPACE/crossfiles/*.ini $HOME/.local/share/meson/cross
          echo "MESON_CROSS_FILES=$HOME/.local/share/meson/cross" >> $GITHUB_ENV
        shell: bash
      - name: install prerequisites pkg
        uses: camelot-os/action-install-pkg@v1
        with:
          packages: 'pandoc,dtc|device-tree-compiler,libssh2-1|libssh2,curl,lld'
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: 1.86.0
      - name: deploy local deps
        run: |
          pip install -r requirements.txt
      - name: defconfig
        run: |
          defconfig configs/stm32f429i_disc1_debug_defconfig
      - name: Meson Doc
        uses: camelot-os/action-meson@v1
        with:
          actions: '["prefetch", "setup"]'
          options: '-Dconfig=.config -Ddts=dts/examples/stm32f429i_disc1_debug.dts -Ddts-include-dirs=dts -Dwith_doc=true -Dwith_uapi=false -Dwith_idle=false'
      - name: Meson postcheck
        if: failure()
        run: |
          cat builddir/meson-logs/meson-log.txt
          cat builddir/meson-logs/testlog.txt
