// SPDX-License-Identifier: Apache-2.0

/*
 * Copyright 2023 Ledger SAS
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * XXX:
 *  !!!! Generated header, DO NOT EDIT !!!!
 */

#ifndef BUSES_H
#define BUSES_H

{#-
    XXX:
     Note that `name` comes from svd soc name in lowercase.
     That being said, heterogeneous soc (i.e. with 2 distinct cpu cores, e.g. a generic core
     and a dedicated for radio or machine learning) are suffixed with an `_` as separator
     between soc family name and core arch to consider.
-#}
{%- set name = name.split('_')[0] %}

#include <dt-bindings/clock/{{ name[:-2].lower() }}_clock.h>

{%- set peripheral = (peripherals|selectattr('groupName', 'eq', 'RCC')|first) or (peripherals|selectattr('name', 'eq', NAME)|first) -%}

{%- macro get_busses_reset(registers) %}
    {% set reset = [] %}
    {% for reg in registers if reg.name.endswith('RSTR') or reg.name.endswith('RSTR1') %}
    {% set _ = reset.append(reg.name[:4]) %}
    {% endfor %}
    {{ reset|unique|list }}
{%- endmacro %}

{%- macro get_busses_clken(registers) %}
    {%- set clken = [] -%}
    {%- for reg in registers if reg.name.startswith('A') and (reg.name.endswith('ENR') or reg.name.endswith('ENR1')) %}
    {%- set _ = clken.append(reg.name[:4]) %}
    {%- endfor %}
    {{- clken|unique|list -}}
{%- endmacro %}

{%- set busses = (get_busses_clken(peripheral.registers)|trim(chars='[]')).split(',')|map("trim", chars=' \'')|list %}

/**
 * @brief list of platform bused.
 * Based on the {{ NAME }} device register naming.
 * This template works for all STM32L4 SoCs
 */
typedef enum bus_identifier {
    {%- for bus in busses %}
    BUS_{{bus}} = STM32_CLOCK_BUS_{{bus}},
    {%- endfor %}
} bus_id_t;

/*
 * XXX:
 *  Fixme with clock tree issue (188, 254)
 */
{%- for bus in busses %}
#define HAS_BUS_{{bus}} 1
{%- endfor %}

#define BUS_IS_VALID(bus) ( \
    {%- for bus in busses %}
    (bus == BUS_{{bus}}) || \
    {%- endfor %}
    false)

/*@
  logic boolean bus_is_valid(uint32_t bus) =
    (
        {%- for bus in busses %}
        (bus == BUS_{{bus}}) ||
        {%- endfor -%}
        \false
    );
*/

#endif/*!BUSES_H*/
