// SPDX-FileCopyrightText: 2023 Ledger SAS
// SPDX-License-Identifier: Apache-2.0

#ifndef RCC_STM32_H
#define RCC_STM32_H

#define HSE_STARTUP_TIMEOUT	(0x0500UL)
#define HSI_STARTUP_TIMEOUT	(0x0500UL)
#define PLL_STARTUP_TIMEOUT	(0x0500UL)

#define RCC_PLL_VCO_MULTIPLIER  {{ dts.clocks.pll.vco_multiplier|int }}UL
#define RCC_PLL_VCO_DIVIDER     {{ dts.clocks.pll.vco_divider|int }}UL
#define RCC_PLL_SYSCLK_DIVIDER  {{ dts.clocks.pll.main_divider|int }}UL
#define RCC_PLL_USB_DIVIDER     {{ dts.clocks.pll.usb_divider|int }}UL

__STATIC_INLINE uint32_t rcc_pll_p_divider(void)
{
    /* value cannot be out of range as there is static assert on these */
    uint32_t value = (RCC_PLL_SYSCLK_DIVIDER >> 1) - 1;
    return ((value << RCC_PLLCFGR_PLLP_SHIFT) & RCC_PLLCFGR_PLLP_MASK);
}

__STATIC_INLINE uint32_t rcc_pll_q_divider(void)
{
    return  ((RCC_PLL_USB_DIVIDER << RCC_PLLCFGR_PLLQ_SHIFT) & RCC_PLLCFGR_PLLQ_MASK);
}

__STATIC_INLINE uint32_t rcc_pll_m_divider(void)
{
    return ((RCC_PLL_VCO_DIVIDER << RCC_PLLCFGR_PLLM_SHIFT) & RCC_PLLCFGR_PLLM_MASK);
}

__STATIC_INLINE uint32_t rcc_pll_n_multiplier(void)
{
        return ((RCC_PLL_VCO_MULTIPLIER << RCC_PLLCFGR_PLLN_SHIFT) & RCC_PLLCFGR_PLLN_MASK);
}

kstatus_t rcc_map(void);

/* for simplicity sake, but unmaping a kernel device is generic */
kstatus_t rcc_unmap(void);

#endif/*!RCC_STM32_H*/
