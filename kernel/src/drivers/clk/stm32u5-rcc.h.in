// SPDX-FileCopyrightText: 2024 Ledger SAS
// SPDX-License-Identifier: Apache-2.0

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

#ifndef __STM32U5_RCC_H
#define __STM32U5_RCC_H

#ifndef CONFIG_SOC_SUBFAMILY_STM32U5
#error "this header should not be included in SoCs others than STM32U5 family"
#endif

#include <sentry/io.h>
#include <sentry/arch/asm-generic/layout.h>
#include "rcc_defs.h"

/* XXX:
 *  Treats MSI clock as fixed clock, for first step we are not supporting different range
 *  neither PLL stabilization for MSI(S/K).
 *  Those are default clock on POR and wake-up from stop mode, cannot be disabled in DTS.
 */
{%- if dts.clocks.clk_msis.status == "okay" %}
#define RCC_MSIS_FREQUENCY {{ dts.clocks.clk_msis['clock-frequency'] }}UL
{%- endif %}
{%- if dts.clocks.clk_msik.status == "okay" %}
#define RCC_MSIK_FREQUENCY {{ dts.clocks.clk_msik['clock-frequency'] }}UL
{%- endif %}

#define RCC_SYSCLOCK_FREQUENCY_MAX (160*MEGA)
#define RCC_AHB_BUS_FREQUENCY_MAX RCC_SYSCLOCK_FREQUENCY_MAX
#define RCC_APB1_BUS_FREQUENCY_MAX RCC_SYSCLOCK_FREQUENCY_MAX
#define RCC_APB2_BUS_FREQUENCY_MAX RCC_SYSCLOCK_FREQUENCY_MAX
#define RCC_APB3_BUS_FREQUENCY_MAX RCC_SYSCLOCK_FREQUENCY_MAX

/*
 * For stm32u5 family, HSI48 control is held by CR register
 */
#define HAS_HSI48_CLOCK
#define RCC_HSI48_REG RCC_CR_REG
#define RCC_HSI48ON RCC_CR_HSI48ON
#define RCC_HSI48RDY RCC_CR_HSI48RDY

typedef enum stm32u5_pll_id {
    PLL_ID_1 = 0,
    PLL_ID_2 = 1,
    PLL_ID_3 = 2,

    PLL_ID_INVALID
} stm32u5_pll_id_t;

typedef enum stm32u5_pll_src_clk {
    PLL_SRC_CLK_NONE = 0,
    PLL_SRC_CLK_MSIS,
    PLL_SRC_CLK_HSI16,
    PLL_SRC_CLK_HSE,

    PLL_SRC_INVALID
} stm32u5_pll_src_clk_t;

typedef struct stm32u5_pll_cfg {
    uint16_t n;
    uint16_t frac;
    uint8_t m;
    uint8_t p;
    uint8_t q;
    uint8_t r;
} stm32u5_pll_cfg_t;

static inline  void __stm32_rcc_set_peripheral_bus_div(
    uint32_t hpre,
    uint32_t ppre1,
    uint32_t ppre2,
    uint32_t ppre3
)
{
    union {
        rcc_cfgr2_t reg;
        uint32_t raw;
    } cfgr2;

    union {
        rcc_cfgr3_t reg;
        uint32_t raw;
    } cfgr3;

    cfgr2.raw = ioread32(RCC_BASE_ADDR + RCC_CFGR2_REG);
    cfgr2.reg.hpre = hpre;
    cfgr2.reg.ppre1 = ppre1;
    cfgr2.reg.ppre2 = ppre2;
    cfgr2.reg.dpre = 0;
    iowrite32(RCC_BASE_ADDR + RCC_CFGR2_REG, cfgr2.raw);

    cfgr3.raw = ioread32(RCC_BASE_ADDR + RCC_CFGR3_REG);
    cfgr3.reg.ppre3 = ppre3;
    iowrite32(RCC_BASE_ADDR + RCC_CFGR3_REG, cfgr3.raw);
}

kstatus_t rcc_select_system_clock(void);

kstatus_t rcc_enable_pll(void);

#endif /* __STM32U5_RCC_H */
