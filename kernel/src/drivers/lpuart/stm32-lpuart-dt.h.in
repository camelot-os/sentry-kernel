// SPDX-FileCopyrightText: 2023 Ledger SAS
// SPDX-License-Identifier: Apache-2.0

#ifndef __STM32_USART_DT_GENERATED_H
#define __STM32_USART_DT_GENERATED_H

#include <stddef.h>

#include <sentry/arch/asm-cortex-m/buses.h>
#include <bsp/drivers/gpio/pinctrl.h>

{% set lpuart_ports = dts.get_compatible("st,stm32-lpuart") -%}

typedef enum stm32_lpuart_id {
    {% for port in lpuart_ports -%}
    {% if port.status and port.status == "okay" -%}
    /** hardcoded ID, voluntary as kernel must have a single USART port for debug */
    {{ port.label.upper() }}_PORT_ID,
    {% endif -%}
    {% endfor %}
    USART_INVALID_PORT_ID,
} stm32_lpuart_id_t;

static_assert(USART_INVALID_PORT_ID > 0, "Not any lpuart peripherals enabled, check your configuration");

/*@
  logic boolean lpuartport_is_valid(uint32_t port) =
    (
        {% for port in lpuart_ports -%}
        {% if port.status and port.status == "okay" -%}
        port == {{ port.label.upper() }}_PORT_ID ||
        {% endif -%}
        {% endfor -%}
        \false
    );
*/

/**
 * \brief STM32 lpuartport IP descriptor
 *
 * Descriptor is feed from device tree file
 *
 * \note Only node w/ compatible="st,stm32-lpuart" and status="okay" properties
 *       will be parsed
 */
typedef struct stm32_lpuartport_dec {
    uint32_t base_addr; /**< IP base address */
    size_t   size;      /**< IP base address */
    bus_id_t bus_id;    /**< Peripheral bus ID */
    uint32_t clk_msk;   /**< IP clocks mask on the given bus */
    const gpio_pinctrl_desc_t *const pinctrl_tbl;
    size_t pinctrl_tbl_size;
} stm32_usartport_desc_t;

const stm32_usartport_desc_t * stm32_lpuartport_get_desc(void);

#endif /* __STM32_USART_DT_GENERATED_H */
