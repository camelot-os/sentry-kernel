// SPDX-FileCopyrightText: 2023 Ledger SAS
// SPDX-License-Identifier: Apache-2.0

/**
 * @file Sentry memory manager shared-memory dts-defined information storage
 */

#include <inttypes.h>
#include <sentry/ktypes.h>
#include "memory_shm-dt.h"

{% set ns = namespace() -%}
{% set ns.total_shm=0 -%}
static const _Alignas(uint64_t) shm_meta_t shms[] = {
    {% for node in dts.get_mappable() -%}
    {% if node|has_property("outpost,shm") -%}
    /* {{ node.label }} */
    {
        .baseaddr = {{ "0x%08x"|format(node.reg[0]) }},
        .size = {{ "0x%08x"|format(node.reg[1]) }},
        {% if node|has_property("dma-pool") -%}
        .is_dma_pool = SECURE_TRUE,
        {% else -%}
        .is_dma_pool = SECURE_FALSE,
        {% endif -%}
        {% if node|has_property("outpost,no-map") -%}
        .is_mappable = SECURE_FALSE,
        {% else -%}
        .is_mappable = SECURE_TRUE,
        {% endif -%}
        {% set label = node["outpost,label"] -%}
        .shm_label = {{ "%#xUL"|format(label) }},
        {% set owner = node["outpost,owner"] -%}
        .owner_label = {{ "%#xUL"|format(owner) }}
    {% set ns.total_shm = ns.total_shm + 1 -%}
    },
    {% endif -%}
{% endfor -%}
    {} /* sentinel */
};

shm_meta_t const *memory_shm_get_meta(size_t id)
{
    shm_meta_t const *meta = NULL;
    if (unlikely(id >= SHM_LIST_SIZE)) {
        goto end;
    }
    meta = &shms[id];
end:
    return meta;
}
