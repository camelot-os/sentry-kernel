// SPDX-FileCopyrightText: 2023 Ledger SAS
// SPDX-License-Identifier: Apache-2.0

#ifndef DMA_DT_H
#define DMA_DT_H

/**
 * @file Sentry DMA streams access API
 */
#include <inttypes.h>
#include <uapi/dma.h>

/**
 * @brief Manager level stream configuration
 *
 * This structure associate a hardware DMA stream configuration (dts-based) to
 * the stream owner (also dts-based, using associated channel owner)
 */
typedef struct dma_meta {
    gpdma_stream_cfg_t  config; /**< Hardware configuration of the stream */
    taskh_t             owner;  /**< stream owner */
    size_t              label; /**< stream unique label to identify the stream at userspace level */
} dma_meta_t;

{% set ns = namespace() -%}
{% set ns.total_streams=0 -%}
{% for node in dts.get_compatible("dma-stream") -%}
{% if node|has_property("sentry,label") -%}
{% set ns.total_streams = ns.total_streams + 1 -%}
{% endif -%}
{% endfor -%}

/**
 * @def number of actual DMA streams declared
 */
#define STREAM_LIST_SIZE {{ "%uUL"|format(ns.total_streams) }}

/**
 * @brief Get owner of given stream
 *
 * Given a stream identifier (), return the corresponding owner
 *
 * @param streamid[in]: streamid field of kdmah_t, part of the dmah_t opaque
 * @param owner[out]: pointer to a taskh_t
 *
 * @returns K_ERROR_INVPARAM if streamid is invalid or owner NULL, or K_STATUS_OKAY
 */
kstatus_t dma_stream_get_owner(size_t streamid, taskh_t * owner);

/**
 * @brief Get config of given stream
 *
 * Given a stream identifier, return the corresponding stream configuration
 *
 * @param streamid[in]: streamid field of kdmah_t, part of the dmah_t opaque
 * @param owner[out]: pointer to a taskh_t
 *
 * @returns K_ERROR_INVPARAM if streamid is invalid or owner NULL, or K_STATUS_OKAY
 */
kstatus_t dma_stream_get_config(size_t streamid, gpdma_stream_cfg_t const ** cfg);

kstatus_t dma_stream_get_label(size_t streamid, size_t * label);

kstatus_t dma_stream_get_meta(size_t streamid, dma_meta_t const ** cfg);

#endif/*!DMA_DT_H*/
