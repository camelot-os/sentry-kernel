// SPDX-FileCopyrightText: 2023 Ledger SAS
// SPDX-License-Identifier: Apache-2.0

/*
 * XXX:
 *  !!!! Generated header, DO NOT EDIT !!!!
 */

#ifndef MGR_DEVICE_DEVLIST_H
#define MGR_DEVICE_DEVLIST_H

/*
 * XXX:
 *  !!! Do not include this header in multiple compilation units, as it
 *    contain a huge const structure that should not be duplicated in memory !!!
 */

#include <sentry/ktypes.h>
#include <uapi/handle.h>
#include <uapi/device.h>
#include <uapi/capability.h>
#include <sentry/managers/device.h>
/* as -dt generated file, the target dir is not the source dir. Using src/ relative path */
#include "managers/device/device.h"

{# get the 'compatible' field as a string table -#}
{%- macro device_get_compatible(device) -%}
    {% if device.compatible is string %}
        {{ device.compatible|join('') }}
    {% else %}
    {{ device.compatible }}
    {% endif %}
{%- endmacro -%}


{# get the device type from compatible, as a single string -#}
{%- macro device_get_type(device) -%}
    {{ "%s"|format(device.compatible|join('')) }}
{%- endmacro -%}

{# get the device capa from the device type, using susbtr search -#}
{% macro device_get_capa(device_type) -%}
    {% if 'gpio' in device_type or
          'leds' in device_type -%}
    {% set capa = 'sentry_capability_t_DEV_IO' -%}
    {% elif 'usart' in device_type or
            'lpuart' in device_type or
            'usart' in device_type or
            'ethernet' in device_type or
            'i2c' in device_type or
            'i2s' in device_type or
            'otgfs' in device_type or
            'otghs' in device_type or
            'ospi' in device_type or
            'qspi' in device_type or
            'spi' in device_type or
            'bxcan' in device_type or
            'fdcan' in device_type or
            'mipi-dsi' in device_type or
            'exti' in device_type
    -%}
    {% set capa = 'sentry_capability_t_DEV_BUSES' -%}
    {% elif 'dma' in device_type or
            'bdma' in device_type or
            'dmamux' in device_type
    -%}
    {% set capa = 'sentry_capability_t_DEV_DMA' -%}
    {% elif 'adc' in device_type or
            'dac' in device_type or
            'pwm' in device_type
    -%}
    {% set capa = 'sentry_capability_t_DEV_ANALOG' -%}
    {% elif 'timers' in device_type or
            'timer' in device_type or
            'lptim' in device_type or
            'rtc' in device_type or
            'watchdog' in device_type
    -%}
    {% set capa = 'sentry_capability_t_DEV_TIMER' -%}
    {% elif 'flash' in device_type or
            'fmc' in device_type or
            'sdmmc' in device_type
    -%}
    {% set capa = 'sentry_capability_t_DEV_STORAGE' -%}
    {% elif 'aes' in device_type or
            'cryp' in device_type or
            'rng' in device_type or
            'syscfg' in device_type
    -%}
    {% set capa = 'sentry_capability_t_DEV_CRYPTO' -%}
    {% elif 'ucpd' in device_type or
            'rcc' in device_type
    -%}
    {% set capa = 'sentry_capability_t_DEV_POWER' -%}
    {% else %}
    {% set capa = '0' -%}
    {% endif -%}
    {{ capa }}
{%- endmacro -%}


{% set ns = namespace() -%}
{% set ns.total_devices=0 %}
static const device_t devices[] = {
    {% for device in dts.get_active_nodes() -%}
    {% if not device.compatible -%}
    {% continue -%}
    {% endif -%}
    {% if 'pll' in device_get_type(device) -%}
    {% continue -%}
    {% endif -%}
    {% set ns.total_devices = ns.total_devices + 1 -%}
    {
        /* device {{ device.label }} declaration */
        .devinfo = {
            .id = {{ "0x%xUL"|format(loop.index - 1) }},
            {% if device.reg -%}
            .baseaddr = {{ "0x%08x"|format(device.reg[0]) }},
            .size = {{ "0x%08x"|format(device.reg[1]) }},
            {% else -%}
            .baseaddr = 0UL,
            .size = 0UL,
            {% endif -%}
            {% if device.interrupts -%}
            .num_interrupt = 1,
            .its = {
                {% if device.interrupts[0] -%}
                {  .it_controler = {{ device.interrupts[1] }}UL, .it_num = {{ device.interrupts[0] }}UL },
                {% else -%}
                {  .it_controler = 0UL, .it_num = 0UL },
                {% endif -%}
                {% for irq in [ 1,2,3,4,5,6,7] -%}
                {  .it_controler = 0UL, .it_num = 0UL },
                {% endfor -%}
            },
            {% else -%}
            .num_interrupt = 0,
            .its = {
                {% for irq in [ 0,1,2,3,4,5,6,7] -%}
                { .it_controler = 0UL, .it_num = 0UL },
                {% endfor -%}
            },
            {% endif -%}
            {#
             forge dev I/P using DTS pinmux configuration.
             filling table with zero cell if needed.
            -#}
            {% if device['pinctrl-0'] -%}
            {% set numio = device['pinctrl-0']|length %}
            .num_ios = {{ numio }},
            .ios = {
                {% for io in [ 0,1,2,3,4,5,6,7] -%}
                {% if io < numio -%}
                {% set io = device['pinctrl-0'][io] -%}
                {
                    {#
                     the GPIO port id is numeric here, using the same resolution
                     as the GPIO driver device tree forge (see stm32-gpio-dt.h for e.g.
                    -#}
                    {% set ns.io_gpio_port=0 -%}
                    {% set gpio_ports = dts.get_compatible("st,stm32-gpio") -%}
                    {% for port in gpio_ports -%}
                    {% if port.status and port.status == "okay" -%}
                    {% if port.label == io.pinmux[0].label -%}
                    /* using port {{ port.label.upper() }} */
                    .port = {{ ns.io_gpio_port }},
                    {% endif -%}
                    {% set ns.io_gpio_port = ns.io_gpio_port + 1 -%}
                    {% endif -%}
                    {% endfor -%} .pin = {{ io.pinmux[1] }}, .mode = {{ io.pinmux[2] }}, .af = {{ io.pinmux[3] }}, .ppull =  {{ io.pincfg[0] }}, .speed =  {{ io.pincfg[1] }}, .pupdr =  {{ io.pincfg[2] }}, },
                {% else -%}
                { .port = 0, .pin = 0, .mode = 0, .af = 0, .ppull = 0, .speed = 0, .pupdr = 0, },
                {% endif -%}
                {%- endfor %}
            },
            {% else -%}
            .num_ios = 0,
            .ios = {
                {% for io in [0,1,2,3,4,5,6,7] -%}
                { .port = 0, .pin = 0, .mode = 0, .af = 0, .ppull = 0, .speed = 0, .pupdr = 0, },
                {% endfor -%}
            },
            {%- endif %}
        },
        {% set type = device_get_type(device) -%}
        /* capa for {{ type }} */
        .capability = {{ "%s"|format(device_get_capa(type)) }},
        {% if device.clocks and not device.label == "rcc" -%}
        {% set _, bus_id, clk_msk = device.clocks -%}
        .clk_id = {{ "%#08xUL"|format(clk_msk) }},
        .bus_id = {{ bus_id }},
        {% else -%}
        .clk_id = 0x0UL,
        .bus_id = 0x0UL,
        {% endif -%}
        {% if device["outpost,owner"] -%}
        .owner = {{ "%#8xUL"|format(device["outpost,owner"]) }},
        {% else -%}
        .owner = 0UL, /* owned by kernel */
        {%- endif %}
    },
    {% endfor %}
};
#define DEVICE_LIST_SIZE {{ "%uUL"|format(ns.total_devices) }}

#endif/*!MGR_DEVICE_DEVLIST_H*/
