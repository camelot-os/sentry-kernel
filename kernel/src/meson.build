# SPDX-FileCopyrightText: 2023 Ledger SAS
# SPDX-License-Identifier: Apache-2.0

# updated in arch, depending on CONFIG value
sentry_startup = files()
sentry_linker_script = files()
sentry_linker_script_path = files()

sentry_private_gen_source_set = ssmod.source_set()
sentry_private_gen_header_set = ssmod.source_set()

# arch-specific content
subdir('arch')
# what can't be deseleted. source listing is dynamic (Kconfig-list)
subdir('core')
subdir('security')
subdir('drivers')
# managers (generic internal API for various services)
subdir('managers')
subdir('syscalls')
subdir('sched')

#enclave_linker_script = files('m7fw.ld')
#enclave_linker_args = [
#    '-T@0@'.format(fs.name(enclave_linker_script[0])),
#    '-L@0@'.format(meson.current_source_dir()),
#]


# Sentry kernel is separated in two main parts
# the static (not depending on external elements such as tasks, dtsi, etc.)
# elements, that are built as a library, and all the autogenerated components,
# such as kernel syscall gate, task list, permission list, etc, that are
# built separately.
# both are then linked together into the kernel binary itself

# XXX add the whole private gen header 'sourceset' to sentry sourceset
# for compatibility (w/ frama-c)
# TODO rework this properly
sentry_source_set.add_all(sentry_private_gen_header_set)
sentry_source_set_config = sentry_source_set.apply(kconfig_data, strict: false)
sentry_private_source_config = sentry_private_gen_source_set.apply(kconfig_data, strict: false)

if with_kernel_opt
# static part library
sentry_lib = static_library('sentry',
    sources: [
        sentry_source_set_config.sources(),
        sentry_header_set_config.sources(),
        sentry_private_source_config.sources(),
    ],
    include_directories: kernel_inc,
    c_args: [ target_arch_args, global_build_args ],
    dependencies: [sentry_source_set_config.dependencies(), external_deps],
)

sentry_dep = declare_dependency(
    link_with: sentry_lib,
    include_directories: kernel_inc,
)
endif
