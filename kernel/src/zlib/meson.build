# SPDX-FileCopyrightText: 2023-2024 Ledger SAS
# SPDX-License-Identifier: Apache-2.0

# sentry zlib
zlib_files = files()

subdir('crypto')

zlib_annotated_files = []
zlib_files += files()
zlib_c_args = []

# in autotest mode, the library includes e-ACSL annotations in order to allow runtime assertions
# to be validated by Frama-C e-acsl plugin through the autotest application test framework
# in nominal (debug or prod mode), the library is built without e-ACSL annotations
if kconfig_data.get('CONFIG_AUTOTEST_ENABLE_EACSL', 0) == 1
    e_acsl_harden = find_program('e-acsl-gcc.sh', required: true)

    string_acsl_annoted_c = custom_target('string_hardened',
        input: 'string.c',
        output: 'string_annotated.c',
        command: [
            e_acsl_harden,
            '-L',
            '-G', meson.get_compiler('c', native : false).cmd_array()[0],
            '--extra-cpp-args=-std=c11,-I' + meson.project_source_root() + '/' + 'kernel/include' + ',-I'  + meson.project_source_root() + '/uapi/include',
            '-o', '@OUTPUT@',
            '--rte=pointer-call,mem',
            '@INPUT@',
        ],
    )

    # zlib local builtins implementation, substitution at link time
    # this is required when generated annotations in replacement of the attribute((alias)) usage
    target_link_args += [
        '-Wl,--defsym=memset=sentry_memset',
        '-Wl,--defsym=memcpy=sentry_memcpy',
        '-Wl,--defsym=strnlen=sentry_strnlen',
    ]
    # note: no-attributes is required to avoid warnings on the
    # __attribute__((FC_BUILTIN)) generated by the e-acsl plugin
    zlib_c_args += ['-Wno-attributes']
    zlib_annotated_files += string_acsl_annoted_c

else
    zlib_files += files('string.c')
endif


zlib_source_set = ssmod.source_set()
zlib_source_set.add(zlib_files)
zlib_source_set_config = zlib_source_set.apply(kconfig_data, strict: false)


sentry_zlib_lib = static_library('sentry_zlib',
    sources: [
        zlib_source_set_config.sources(),
        zlib_header_set_config.sources(),
        zlib_annotated_files,
    ],
    include_directories: kernel_inc,
    c_args: [ target_arch_args, global_build_args, activated_lib_hardening_cflags, zlib_c_args ],
    install: false,
    dependencies: [zlib_source_set_config.dependencies(), external_deps, ],
)

sentry_zlib_dep = declare_dependency(
    link_with: sentry_zlib_lib,
    sources: zlib_header_set_config.sources(),
    include_directories: kernel_inc,
)
