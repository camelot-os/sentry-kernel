use std::env;
use std::path::PathBuf;
use std::process::Command;

fn main() {
    let arch = env::var("CARGO_CFG_TARGET_ARCH").unwrap();
    let mut bindings = bindgen::Builder::default()
        .header("managers_meta.h")
        .clang_args(["-I../../../../uapi/include", "-I../../../include"])
        .clang_args([
            "-DCONFIG_MAX_SHM_PER_TASK=1",
            "-DCONFIG_MAX_DEV_PER_TASK=1",
            "-DCONFIG_MAX_DMA_STREAMS_PER_TASK=1",
            "-DCONFIG_BUILD_TARGET_DEBUG=1",
        ])
        .use_core();

    if arch == "arm" {
        // Hack to prevent bindgen from trying to reach core.h which is
        // generated by meson and otherwise not present
        bindings = bindings.clang_arg("--target=x86_64-unknown-linux-gnu");

        let output = Command::new("arm-none-eabi-gcc")
            .arg("-print-sysroot")
            .output()
            .ok();
        let sysroot = output
            .as_ref()
            .and_then(|o| std::str::from_utf8(&o.stdout).ok())
            .unwrap_or("/opt/arm-none-eabi/bin/arm-none-eabi-gcc/")
            .trim();
        bindings = bindings.clang_arg(format!("-I{sysroot}/include"))
    }

    let bindings = bindings
        .parse_callbacks(Box::new(bindgen::CargoCallbacks::new()))
        .generate()
        .expect("Unable to generate bindings");

    let out_path = PathBuf::from(env::var("OUT_DIR").unwrap());
    bindings
        .write_to_file(out_path.join("bindings.rs"))
        .expect("Couldn't write bindings!");
}
